{"/home/travis/build/npmtest/node-npmtest-changelog-maker/test.js":"/* istanbul instrument in package npmtest_changelog_maker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-changelog-maker/lib.npmtest_changelog_maker.js":"/* istanbul instrument in package npmtest_changelog_maker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_changelog_maker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_changelog_maker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-changelog-maker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-changelog-maker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_changelog_maker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_changelog_maker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_changelog_maker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_changelog_maker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_changelog_maker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_changelog_maker.__dirname + '/lib.npmtest_changelog_maker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-changelog-maker/node_modules/changelog-maker/changelog-maker.js":"#!/usr/bin/env node\n\nconst bl             = require('bl')\n    , split2         = require('split2')\n    , list           = require('list-stream')\n    , fs             = require('fs')\n    , path           = require('path')\n    , chalk          = require('chalk')\n    , pkgtoId        = require('pkg-to-id')\n    , commitStream   = require('commit-stream')\n    , gitexec        = require('gitexec')\n    , commitToOutput = require('./commit-to-output')\n    , groupCommits   = require('./group-commits')\n    , collectCommitLabels = require('./collect-commit-labels')\n    , isReleaseCommit = require('./groups').isReleaseCommit\n\n    , argv           = require('minimist')(process.argv.slice(2))\n\n    , quiet          = argv.quiet || argv.q\n    , simple         = argv.simple || argv.s\n    , help           = argv.h || argv.help \n\n    , pkg            = require('./package.json')\n    , debug          = require('debug')(pkg.name)\n    , pkgFile        = path.join(process.cwd(), 'package.json')\n    , pkgData        = fs.existsSync(pkgFile) ? require(pkgFile) : {}\n    , pkgId          = pkgtoId(pkgData)\n\n    , ghId           = {\n          user: argv._[0] || pkgId.user || 'nodejs'\n        , name: argv._[1] || (pkgId.name && stripScope(pkgId.name)) || 'node'\n      }\n\nconst gitcmd         = 'git log --pretty=full --since=\"{{sincecmd}}\" --until=\"{{untilcmd}}\"'\n    , commitdatecmd  = '$(git show -s --format=%cd `{{refcmd}}`)'\n    , untilcmd       = ''\n    , refcmd         = argv.a || argv.all ? 'git rev-list --max-parents=0 HEAD' : 'git rev-list --max-count=1 {{ref}}'\n    , defaultRef     = '--tags=v*.*.* 2> /dev/null ' +\n        '|| git rev-list --max-count=1 --tags=*.*.* 2> /dev/null ' +\n        '|| git rev-list --max-count=1 HEAD'\n\ndebug(ghId)\n\nif (help) {\n  showUsage()\n  process.exit(0)\n} \n\nfunction showUsage () {\n  var usage = fs.readFileSync(path.join(__dirname, 'README.md'), 'utf8')\n    .replace(/[\\s\\S]+(## Usage\\n[\\s\\S]*)\\n## [\\s\\S]+/m, '$1')\n  if (process.stdout.isTTY) {\n    usage = usage\n      .replace(/## Usage\\n[\\s]*/m, '')\n      .replace(/\\*\\*/g, '')\n      .replace(/`/g, '')\n  }\n  process.stdout.write(usage)\n} \n\nfunction stripScope (name) {\n  return name[0] === '@' && name.indexOf('/') > 0 ? name.split('/')[1] : name\n}\n\nfunction replace (s, m) {\n  Object.keys(m).forEach(function (k) {\n    s = s.replace(new RegExp('\\\\{\\\\{' + k + '\\\\}\\\\}', 'g'), m[k])\n  })\n  return s\n}\n\n\nfunction organiseCommits (list) {\n  if (argv['start-ref'] || argv.a || argv.all) {\n    if (argv['filter-release'])\n      list = list.filter(function (commit) { return !isReleaseCommit(commit.summary) })\n    return list\n  }\n\n  // filter commits to those _before_ 'working on ...'\n  var started = false\n  return list.filter(function (commit) {\n    if (started)\n      return false\n\n    if (isReleaseCommit(commit.summary))\n      started = true\n\n    return !started\n  })\n}\n\n\nfunction printCommits (list) {\n  var out = list.join('\\n') + '\\n'\n\n  if (!process.stdout.isTTY)\n    out = chalk.stripColor(out)\n\n  process.stdout.write(out)\n}\n\n\nfunction onCommitList (err, list) {\n  if (err)\n    throw err\n\n  list = organiseCommits(list)\n\n  collectCommitLabels(list, function (err) {\n    if (err)\n      throw err\n\n    if (argv.group)\n      list = groupCommits(list)\n\n    list = list.map(function (commit) {\n      return commitToOutput(commit, simple, ghId)\n    })\n\n    if (!quiet)\n      printCommits(list)\n  })\n}\n\n\nvar _startrefcmd = replace(refcmd, { ref: argv['start-ref'] || defaultRef })\n  , _endrefcmd   = argv['end-ref'] && replace(refcmd, { ref: argv['end-ref'] })\n  , _sincecmd    = replace(commitdatecmd, { refcmd: _startrefcmd })\n  , _untilcmd    = argv['end-ref'] ? replace(commitdatecmd, { refcmd: _endrefcmd }) : untilcmd\n  , _gitcmd      = replace(gitcmd, { sincecmd: _sincecmd, untilcmd: _untilcmd })\n\ndebug('%s', _startrefcmd)\ndebug('%s', _endrefcmd)\ndebug('%s', _sincecmd)\ndebug('%s', _untilcmd)\ndebug('%s', _gitcmd)\n\ngitexec.exec(process.cwd(), _gitcmd)\n  .pipe(split2())\n  .pipe(commitStream(ghId.user, ghId.name))\n  .pipe(list.obj(onCommitList))\n","/home/travis/build/npmtest/node-npmtest-changelog-maker/node_modules/changelog-maker/commit-to-output.js":"const chalk   = require('chalk')\n    , reverts = require('./reverts')\n    , groups  = require('./groups')\n\n\nfunction cleanMarkdown (txt) {\n  // escape []<>\n  return txt.replace(/([\\[\\]<>])/g, '\\\\$1')\n}\n\n\nfunction toStringSimple (data) {\n  var s = ''\n  s += '* [' + data.sha.substr(0, 10) + '] - '\n  s += (data.semver || []).length ? '(' + data.semver.join(', ').toUpperCase() + ') ' : ''\n  s += data.revert ? 'Revert \"' : ''\n  s += data.group ? data.group + ': ' : ''\n  s += data.summary\n  s += data.revert ? '\" ' : ' '\n  s += data.author ? '(' + data.author + ') ' : ''\n  s += data.pr ? data.prUrl : ''\n\n  return data.semver.length\n      ? chalk.green(chalk.bold(s))\n      : data.group == 'doc'\n        ? chalk.grey(s)\n        : s\n}\n\n\nfunction toStringMarkdown (data) {\n  var s = ''\n  s += '* [[`' + data.sha.substr(0, 10) + '`](' + data.shaUrl + ')] - '\n  s += (data.semver || []).length ? '**(' + data.semver.join(', ').toUpperCase() + ')** ' : ''\n  s += data.revert ? '***Revert*** \"' : ''\n  s += data.group ? '**' + data.group + '**: ' : ''\n  s += cleanMarkdown(data.summary)\n  s += data.revert ? '\" ' : ' '\n  s += data.author ? '(' + data.author + ') ' : ''\n  s += data.pr ? '[' + data.pr + '](' + data.prUrl + ')' : ''\n\n  return data.semver.length\n      ? chalk.green(chalk.bold(s))\n      : data.group == 'doc'\n        ? chalk.grey(s)\n        : s\n}\n\n\nfunction commitToOutput (commit, simple, ghId) {\n  var data        = {}\n    , prUrlMatch  = commit.prUrl && commit.prUrl.match(/^https?:\\/\\/.+\\/([^\\/]+\\/[^\\/]+)\\/\\w+\\/\\d+$/i)\n    , urlHash     = '#'+commit.ghIssue || commit.prUrl\n    , ghUrl       = ghId.user + '/' + ghId.name\n\n  data.sha     = commit.sha\n  data.shaUrl  = 'https://github.com/' + ghUrl + '/commit/' + commit.sha.substr(0,10)\n  data.semver  = commit.labels && commit.labels.filter(function (l) { return l.indexOf('semver') > -1 }) || false\n  data.revert  = reverts.isRevert(commit.summary)\n  data.group   = groups.toGroups(commit.summary)\n  data.summary = groups.cleanSummary(reverts.cleanSummary(commit.summary))\n  data.author  = (commit.author && commit.author.name) || ''\n  data.pr      = prUrlMatch && ((prUrlMatch[1] != ghUrl ? prUrlMatch[1] : '') + urlHash)\n  data.prUrl   = prUrlMatch && commit.prUrl\n\n  return (simple ? toStringSimple : toStringMarkdown)(data)\n}\n\n\nmodule.exports = commitToOutput\n","/home/travis/build/npmtest/node-npmtest-changelog-maker/node_modules/changelog-maker/reverts.js":"const revertRe = /^revert\\s+\"?/i\n\n\nfunction isRevert (summary) {\n  return summary && revertRe.test(summary)\n}\n\n\nfunction cleanSummary (summary) {\n  summary = summary || ''\n  if (!isRevert(summary))\n    return summary\n  return summary.replace(revertRe, '').replace(/\"$/, '')\n}\n\n\nmodule.exports.isRevert     = isRevert\nmodule.exports.cleanSummary = cleanSummary","/home/travis/build/npmtest/node-npmtest-changelog-maker/node_modules/changelog-maker/groups.js":"const groupRe = /^((:?\\w|\\-|,|, )+):\\s*/i\n    , reverts = require('./reverts')\n\n\nfunction toGroups (summary) {\n  summary = reverts.cleanSummary(summary)\n  var m = summary.match(groupRe)\n  return (m && m[1]) || ''\n}\n\n\nfunction cleanSummary (summary) {\n  return (summary || '').replace(groupRe, '')\n}\n\n\n/*\n\nto test this, run on the commandline:\n\nfor br in v4.x v5.x v6.x v7.x; do git log $br --format='%s' | grep -E '^\\d+.*elease$' >> /tmp/release-commits-all.txt; done\nsort /tmp/release-commits-all.txt | uniq > /tmp/release-commits.txt\nrm /tmp/release-commits-all.txt\n\nthen in this directory:\n\nnode groups.js /tmp/release-commits.txt\n\ndoesn't cover false positives though\n*/\n\nfunction isReleaseCommit (summary) {\n  return /^Working on v?\\d{1,2}\\.\\d{1,3}\\.\\d{1,3}$/.test(summary)\n         || /^\\d{4}-\\d{2}-\\d{2},? (Node\\.js|Version) v?\\d{1,2}\\.\\d{1,3}\\.\\d{1,3} ([\"'][A-Za-z ]+[\"'] )?\\((Current|Stable|LTS|Maintenance)\\)/.test(summary)\n         || /^\\d{4}-\\d{2}-\\d{2},? io.js v\\d{1,2}\\.\\d{1,3}\\.\\d{1,3} Release/.test(summary)\n         || /^\\d+\\.\\d+\\.\\d+$/.test(summary) // `npm version X` style commit\n}\n\n\nmodule.exports.toGroups        = toGroups\nmodule.exports.cleanSummary    = cleanSummary\nmodule.exports.isReleaseCommit = isReleaseCommit\n\n\nif (require.main == module) {\n  console.log(`Running tests on lines in ${process.argv[2]}...`)\n  var failures = require('fs').readFileSync(process.argv[2], 'utf8').split('\\n').filter(Boolean).filter((summary) => {\n    return !isReleaseCommit(summary)\n  })\n  if (!failures.length)\n    return console.log('All good, no failures!')\n  console.log('Failed on the following commit summaries:')\n  console.log(failures.join('\\n'))\n}\n","/home/travis/build/npmtest/node-npmtest-changelog-maker/node_modules/changelog-maker/collect-commit-labels.js":"const ghauth         = require('ghauth')\n    , ghissues       = require('ghissues')\n    , async          = require('async')\n\n    , authOptions    = {\n          configName : 'changelog-maker'\n        , scopes     : ['repo']\n      }\n\n\nfunction collectCommitLabels (list, callback) {\n  var sublist = list.filter(function (commit) {\n    return typeof commit.ghIssue == 'number' && commit.ghUser && commit.ghProject\n  })\n\n  if (!sublist.length)\n    return setImmediate(callback)\n\n  ghauth(authOptions, function (err, authData) {\n    if (err)\n      return callback(err)\n    var q = async.queue(function (commit, next) {\n      function onFetch (err, issue) {\n        if (err) {\n          console.error('Error fetching issue #%s: %s', commit.ghIssue, err.message );\n          return next()\n        }\n\n        if (issue.labels)\n          commit.labels = issue.labels.map(function (label) { return label.name })\n        next()\n      }\n\n      if (commit.ghUser == 'iojs')\n        commit.ghUser = 'nodejs' // forcably rewrite as the GH API doesn't do it for us\n\n      ghissues.get(authData, commit.ghUser, commit.ghProject, commit.ghIssue, onFetch)\n    }, 15)\n    q.drain = callback\n    q.push(sublist)\n  })\n}\n\n\nmodule.exports = collectCommitLabels","/home/travis/build/npmtest/node-npmtest-changelog-maker/node_modules/changelog-maker/group-commits.js":"const toGroups = require('./groups').toGroups\n\n\nfunction groupCommits (list) {\n  var groupList = list.reduce(function (groupList, commit) {\n    var group = toGroups(commit.summary) || '*'\n    if (!groupList[group])\n      groupList[group] = []\n    groupList[group].push(commit)\n    return groupList\n  }, {})\n\n  return Object.keys(groupList).sort().reduce(function (p, group) {\n    return p.concat(groupList[group])\n  }, [])\n}\n\n\nmodule.exports = groupCommits"}